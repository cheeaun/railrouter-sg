{"mappings":"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","sources":["src/sw.js","node_modules/workbox-routing/NavigationRoute.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/models/messages/messages.js","node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/Router.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-strategies/CacheFirst.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/CacheOnly.js","node_modules/workbox-strategies/NetworkFirst.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-strategies/NetworkOnly.js","node_modules/workbox-strategies/StaleWhileRevalidate.js","node_modules/workbox-expiration/CacheExpiration.js","node_modules/workbox-core/_private/dontWaitFor.js","node_modules/workbox-expiration/models/CacheTimestampsModel.js","node_modules/idb/build/esm/index.js","node_modules/idb/build/esm/wrap-idb-value.js","node_modules/workbox-expiration/_version.js","node_modules/workbox-expiration/ExpirationPlugin.js","node_modules/workbox-core/registerQuotaErrorCallback.js","node_modules/workbox-cacheable-response/CacheableResponse.js","node_modules/workbox-cacheable-response/_version.js","node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","node_modules/workbox-google-analytics/initialize.js","node_modules/workbox-background-sync/BackgroundSyncPlugin.js","node_modules/workbox-background-sync/Queue.js","node_modules/workbox-background-sync/lib/QueueStore.js","node_modules/workbox-background-sync/_version.js","node_modules/workbox-background-sync/lib/QueueDb.js","node_modules/workbox-background-sync/lib/StorableRequest.js","node_modules/workbox-google-analytics/utils/constants.js","node_modules/workbox-google-analytics/_version.js"],"sourcesContent":["import { registerRoute } from 'workbox-routing';\nimport {\n  NetworkFirst,\n  StaleWhileRevalidate,\n  CacheFirst,\n} from 'workbox-strategies';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\nimport * as googleAnalytics from 'workbox-google-analytics';\n\ngoogleAnalytics.initialize();\n\nregisterRoute(\n  ({ request }) => request.mode === 'navigate',\n  new NetworkFirst({\n    cacheName: 'index',\n  }),\n);\n\nregisterRoute(\n  ({ request }) =>\n    request.destination === 'style' || request.destination === 'script',\n  new StaleWhileRevalidate({\n    cacheName: 'static-resources',\n    plugins: [\n      new ExpirationPlugin({\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days\n        purgeOnQuotaError: true,\n      }),\n    ],\n  }),\n);\n\nregisterRoute(\n  ({ request }) => request.destination === 'image',\n  new CacheFirst({\n    cacheName: 'images',\n    plugins: [\n      new ExpirationPlugin({\n        maxEntries: 60,\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days\n        purgeOnQuotaError: true,\n      }),\n      new CacheableResponsePlugin({\n        statuses: [0, 200],\n      }),\n    ],\n  }),\n);\n\nregisterRoute(\n  /.*api\\.mapbox\\.com\\/fonts/,\n  new CacheFirst({\n    cacheName: 'mapbox-fonts',\n    plugins: [\n      new ExpirationPlugin({\n        maxEntries: 10,\n        purgeOnQuotaError: true,\n      }),\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n    ],\n  }),\n);\n\nregisterRoute(\n  /.*(?:tiles\\.mapbox|api\\.mapbox)\\.com.*$/,\n  new StaleWhileRevalidate({\n    cacheName: 'mapbox',\n    plugins: [\n      new ExpirationPlugin({\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days\n        purgeOnQuotaError: true,\n      }),\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n    ],\n  }),\n);\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` +\n                    `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`;\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return `The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`;\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName }) => {\n        if (!expectedMethod || !paramName || !moduleName || !className\n            || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return `An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` +\n                `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` +\n                `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': () => {\n        return `The route you're trying to unregister was not previously ` +\n            `registered.`;\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return `The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return `The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`;\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`;\n    },\n    'channel-name-required': () => {\n        return `You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': () => {\n        return `The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': () => {\n        return `You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return `The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return `Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return `There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`;\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return `The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`);\n    },\n    'non-precached-url': ({ url }) => {\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`;\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`;\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return `workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`;\n    },\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {module:workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            if (event.data && event.data.type === 'CACHE_URLS') { // eslint-disable-line\n                const { payload } = event.data; // eslint-disable-line\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof module:workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * [workbox-core]{@link module:workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * [route]{@link module:workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to [`handle()`]{@link module:workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of [response, done] promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string' ?\n            new Request(options.request) :\n            options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the [`handler`]{@link module:workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {module:workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof module:workbox-strategies.Strategy\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return (typeof input === 'string') ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ?\n            request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', { thrownErrorMessage: err.message });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ?\n                undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse = (await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event,\n            })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(\n        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) :\n            null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ?\n                responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        if (!this._cacheKeys[mode]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params,\n                }));\n            }\n            this._cacheKeys[mode] = effectiveRequest;\n        }\n        return this._cacheKeys[mode];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while (promise = this._extendLifetimePromises.shift()) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache = (await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event,\n            })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' ` +\n                    `cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, logs, handler });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                await networkPromise;\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [handler.fetch(request)];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler\n            .fetchAndCachePut(request)\n            .catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof module:workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ?\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\n                    'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n            return timestamp !== undefined ? (timestamp < expireOlderThan) : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        await db.put(CACHE_OBJECT_STORE, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n      * Returns an open connection to the database.\n      *\n      * @private\n      */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the associated cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof module:workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` +\n                    JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` +\n                    JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` +\n                    JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { BackgroundSyncPlugin } from 'workbox-background-sync/BackgroundSyncPlugin.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { Router } from 'workbox-routing/Router.js';\nimport { NetworkFirst } from 'workbox-strategies/NetworkFirst.js';\nimport { NetworkOnly } from 'workbox-strategies/NetworkOnly.js';\nimport { QUEUE_NAME, MAX_RETENTION_TIME, GOOGLE_ANALYTICS_HOST, GTM_HOST, ANALYTICS_JS_PATH, GTAG_JS_PATH, GTM_JS_PATH, COLLECT_PATHS_REGEX, } from './utils/constants.js';\nimport './_version.js';\n/**\n * Creates the requestWillDequeue callback to be used with the background\n * sync plugin. The callback takes the failed request and adds the\n * `qt` param based on the current time, as well as applies any other\n * user-defined hit modifications.\n *\n * @param {Object} config See {@link module:workbox-google-analytics.initialize}.\n * @return {Function} The requestWillDequeue callback function.\n *\n * @private\n */\nconst createOnSyncCallback = (config) => {\n    return async ({ queue }) => {\n        let entry;\n        while ((entry = await queue.shiftRequest())) {\n            const { request, timestamp } = entry;\n            const url = new URL(request.url);\n            try {\n                // Measurement protocol requests can set their payload parameters in\n                // either the URL query string (for GET requests) or the POST body.\n                const params = request.method === 'POST' ?\n                    new URLSearchParams(await request.clone().text()) :\n                    url.searchParams;\n                // Calculate the qt param, accounting for the fact that an existing\n                // qt param may be present and should be updated rather than replaced.\n                const originalHitTime = timestamp - (Number(params.get('qt')) || 0);\n                const queueTime = Date.now() - originalHitTime;\n                // Set the qt param prior to applying hitFilter or parameterOverrides.\n                params.set('qt', String(queueTime));\n                // Apply `parameterOverrides`, if set.\n                if (config.parameterOverrides) {\n                    for (const param of Object.keys(config.parameterOverrides)) {\n                        const value = config.parameterOverrides[param];\n                        params.set(param, value);\n                    }\n                }\n                // Apply `hitFilter`, if set.\n                if (typeof config.hitFilter === 'function') {\n                    config.hitFilter.call(null, params);\n                }\n                // Retry the fetch. Ignore URL search params from the URL as they're\n                // now in the post body.\n                await fetch(new Request(url.origin + url.pathname, {\n                    body: params.toString(),\n                    method: 'POST',\n                    mode: 'cors',\n                    credentials: 'omit',\n                    headers: { 'Content-Type': 'text/plain' },\n                }));\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(url.href)}' ` +\n                        `has been replayed`);\n                }\n            }\n            catch (err) {\n                await queue.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(url.href)}' ` +\n                        `failed to replay, putting it back in the queue.`);\n                }\n                throw err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`All Google Analytics request successfully replayed; ` +\n                `the queue is now empty!`);\n        }\n    };\n};\n/**\n * Creates GET and POST routes to catch failed Measurement Protocol hits.\n *\n * @param {BackgroundSyncPlugin} bgSyncPlugin\n * @return {Array<Route>} The created routes.\n *\n * @private\n */\nconst createCollectRoutes = (bgSyncPlugin) => {\n    const match = ({ url }) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n        COLLECT_PATHS_REGEX.test(url.pathname);\n    const handler = new NetworkOnly({\n        plugins: [bgSyncPlugin],\n    });\n    return [\n        new Route(match, handler, 'GET'),\n        new Route(match, handler, 'POST'),\n    ];\n};\n/**\n * Creates a route with a network first strategy for the analytics.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createAnalyticsJsRoute = (cacheName) => {\n    const match = ({ url }) => url.hostname === GOOGLE_ANALYTICS_HOST &&\n        url.pathname === ANALYTICS_JS_PATH;\n    const handler = new NetworkFirst({ cacheName });\n    return new Route(match, handler, 'GET');\n};\n/**\n * Creates a route with a network first strategy for the gtag.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createGtagJsRoute = (cacheName) => {\n    const match = ({ url }) => url.hostname === GTM_HOST &&\n        url.pathname === GTAG_JS_PATH;\n    const handler = new NetworkFirst({ cacheName });\n    return new Route(match, handler, 'GET');\n};\n/**\n * Creates a route with a network first strategy for the gtm.js script.\n *\n * @param {string} cacheName\n * @return {Route} The created route.\n *\n * @private\n */\nconst createGtmJsRoute = (cacheName) => {\n    const match = ({ url }) => url.hostname === GTM_HOST &&\n        url.pathname === GTM_JS_PATH;\n    const handler = new NetworkFirst({ cacheName });\n    return new Route(match, handler, 'GET');\n};\n/**\n * @param {Object=} [options]\n * @param {Object} [options.cacheName] The cache name to store and retrieve\n *     analytics.js. Defaults to the cache names provided by `workbox-core`.\n * @param {Object} [options.parameterOverrides]\n *     [Measurement Protocol parameters](https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters),\n *     expressed as key/value pairs, to be added to replayed Google Analytics\n *     requests. This can be used to, e.g., set a custom dimension indicating\n *     that the request was replayed.\n * @param {Function} [options.hitFilter] A function that allows you to modify\n *     the hit parameters prior to replaying\n *     the hit. The function is invoked with the original hit's URLSearchParams\n *     object as its only argument.\n *\n * @memberof module:workbox-google-analytics\n */\nconst initialize = (options = {}) => {\n    const cacheName = cacheNames.getGoogleAnalyticsName(options.cacheName);\n    const bgSyncPlugin = new BackgroundSyncPlugin(QUEUE_NAME, {\n        maxRetentionTime: MAX_RETENTION_TIME,\n        onSync: createOnSyncCallback(options),\n    });\n    const routes = [\n        createGtmJsRoute(cacheName),\n        createAnalyticsJsRoute(cacheName),\n        createGtagJsRoute(cacheName),\n        ...createCollectRoutes(bgSyncPlugin),\n    ];\n    const router = new Router();\n    for (const route of routes) {\n        router.registerRoute(route);\n    }\n    router.addFetchListener();\n};\nexport { initialize, };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Queue } from './Queue.js';\nimport './_version.js';\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof module:workbox-background-sync\n */\nclass BackgroundSyncPlugin {\n    /**\n     * @param {string} name See the [Queue]{@link module:workbox-background-sync.Queue}\n     *     documentation for parameter details.\n     * @param {Object} [options] See the\n     *     [Queue]{@link module:workbox-background-sync.Queue} documentation for\n     *     parameter details.\n     */\n    constructor(name, options) {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request\n         * @private\n         */\n        this.fetchDidFail = async ({ request }) => {\n            await this._queue.pushRequest({ request });\n        };\n        this._queue = new Queue(name, options);\n    }\n}\nexport { BackgroundSyncPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { QueueStore } from './lib/QueueStore.js';\nimport { StorableRequest } from './lib/StorableRequest.js';\nimport './_version.js';\nconst TAG_PREFIX = 'workbox-background-sync';\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\nconst queueNames = new Set();\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param {UnidentifiedQueueStoreEntry} queueStoreEntry\n * @return {Queue}\n * @private\n */\nconst convertEntry = (queueStoreEntry) => {\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp,\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof module:workbox-background-sync\n */\nclass Queue {\n    /**\n     * Creates an instance of Queue with the given options\n     *\n     * @param {string} name The unique name for this queue. This name must be\n     *     unique as it's used to register sync events and store requests\n     *     in IndexedDB specific to this instance. An error will be thrown if\n     *     a duplicate name is detected.\n     * @param {Object} [options]\n     * @param {Function} [options.onSync] A function that gets invoked whenever\n     *     the 'sync' event fires. The function is invoked with an object\n     *     containing the `queue` property (referencing this instance), and you\n     *     can use the callback to customize the replay behavior of the queue.\n     *     When not set the `replayRequests()` method is called.\n     *     Note: if the replay fails after a sync event, make sure you throw an\n     *     error, so the browser knows to retry the sync event later.\n     * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n     *     minutes) a request may be retried. After this amount of time has\n     *     passed, the request will be deleted from the queue.\n     */\n    constructor(name, { onSync, maxRetentionTime } = {}) {\n        this._syncInProgress = false;\n        this._requestsAddedDuringSync = false;\n        // Ensure the store name is not already being used\n        if (queueNames.has(name)) {\n            throw new WorkboxError('duplicate-queue-name', { name });\n        }\n        else {\n            queueNames.add(name);\n        }\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    /**\n     * @return {string}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the end of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async pushRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'push');\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the beginning of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async unshiftRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'unshift');\n    }\n    /**\n     * Removes and returns the last request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async popRequest() {\n        return this._removeRequest('pop');\n    }\n    /**\n     * Removes and returns the first request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async shiftRequest() {\n        return this._removeRequest('shift');\n    }\n    /**\n     * Returns all the entries that have not expired (per `maxRetentionTime`).\n     * Any expired entries are removed from the queue.\n     *\n     * @return {Promise<Array<QueueEntry>>}\n     */\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            }\n            else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    /**\n     * Adds the entry to the QueueStore and registers for a sync event.\n     *\n     * @param {Object} entry\n     * @param {Request} entry.request\n     * @param {Object} [entry.metadata]\n     * @param {number} [entry.timestamp=Date.now()]\n     * @param {string} operation ('push' or 'unshift')\n     * @private\n     */\n    async _addRequest({ request, metadata, timestamp = Date.now(), }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp,\n        };\n        // Only include metadata if it's present.\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        await this._queueStore[`${operation}Entry`](entry);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n                `been added to background sync queue '${this._name}'.`);\n        }\n        // Don't register for a sync if we're in the middle of a sync. Instead,\n        // we wait until the sync is complete and call register if\n        // `this._requestsAddedDuringSync` is true.\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        }\n        else {\n            await this.registerSync();\n        }\n    }\n    /**\n     * Removes and returns the first or last (depending on `operation`) entry\n     * from the QueueStore that's not older than the `maxRetentionTime`.\n     *\n     * @param {string} operation ('pop' or 'shift')\n     * @return {Object|undefined}\n     * @private\n     */\n    async _removeRequest(operation) {\n        const now = Date.now();\n        const entry = await this._queueStore[`${operation}Entry`]();\n        if (entry) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Loops through each request in the queue and attempts to re-fetch it.\n     * If any request fails to re-fetch, it's put back in the same position in\n     * the queue (which registers a retry for the next sync event).\n     */\n    async replayRequests() {\n        let entry;\n        while ((entry = await this.shiftRequest())) {\n            try {\n                await fetch(entry.request.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `has been replayed in queue '${this._name}'`);\n                }\n            }\n            catch (error) {\n                await this.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new WorkboxError('queue-replay-failed', { name: this._name });\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`All requests in queue '${this.name}' have successfully ` +\n                `replayed; the queue is now empty!`);\n        }\n    }\n    /**\n     * Registers a sync event with a tag unique to this instance.\n     */\n    async registerSync() {\n        if ('sync' in self.registration) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            }\n            catch (err) {\n                // This means the registration failed for some reason, possibly due to\n                // the user disabling it.\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    /**\n     * In sync-supporting browsers, this adds a listener for the sync event.\n     * In non-sync-supporting browsers, this will retry the queue on service\n     * worker startup.\n     *\n     * @private\n     */\n    _addSyncListener() {\n        if ('sync' in self.registration) {\n            self.addEventListener('sync', (event) => {\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.log(`Background sync for tag '${event.tag}' ` +\n                            `has been received`);\n                    }\n                    const syncComplete = async () => {\n                        this._syncInProgress = true;\n                        let syncError;\n                        try {\n                            await this._onSync({ queue: this });\n                        }\n                        catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                // Rethrow the error. Note: the logic in the finally clause\n                                // will run before this gets rethrown.\n                                throw syncError;\n                            }\n                        }\n                        finally {\n                            // New items may have been added to the queue during the sync,\n                            // so we need to register for a new sync if that's happened...\n                            // Unless there was an error during the sync, in which\n                            // case the browser will automatically retry later, as long\n                            // as `event.lastChance` is not true.\n                            if (this._requestsAddedDuringSync &&\n                                !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Background sync replaying without background sync event`);\n            }\n            // If the browser doesn't support background sync, retry\n            // every time the service worker starts up as a fallback.\n            void this._onSync({ queue: this });\n        }\n    }\n    /**\n     * Returns the set of queue names. This is primarily used to reset the list\n     * of queue names in tests.\n     *\n     * @return {Set<string>}\n     *\n     * @private\n     */\n    static get _queueNames() {\n        return queueNames;\n    }\n}\nexport { Queue };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nimport { QueueDb } from './QueueDb.js';\n/**\n * A class to manage storing requests from a Queue in IndexedDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n    /**\n     * Associates this instance with a Queue instance, so entries added can be\n     * identified by their queue name.\n     *\n     * @param {string} queueName\n     * @private\n     */\n    constructor(queueName) {\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    /**\n     * Append an entry last in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     * @private\n     */\n    async pushEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        // Don't specify an ID since one is automatically generated.\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Prepend an entry first in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     * @private\n     */\n    async unshiftEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            // Pick an ID one less than the lowest ID in the object store.\n            entry.id = firstId - 1;\n        }\n        else {\n            // Otherwise let the auto-incrementor assign the ID.\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Removes and returns the last entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    /**\n     * Removes and returns the first entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    /**\n     * Returns all entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link module:workbox-background-sync.Queue~getAll}\n     * @return {Promise<Array<Object>>}\n     * @private\n     */\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    /**\n     * Deletes the entry for the given ID.\n     *\n     * WARNING: this method does not ensure the deleted entry belongs to this\n     * queue (i.e. matches the `queueName`). But this limitation is acceptable\n     * as this class is not publicly exposed. An additional check would make\n     * this method slower than it needs to be.\n     *\n     * @private\n     * @param {number} id\n     */\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    /**\n     * Removes and returns the first or last entry in the queue (based on the\n     * `direction` argument) matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:background-sync:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2021 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB } from 'idb';\nimport '../_version.js';\nconst DB_VERSION = 3;\nconst DB_NAME = 'workbox-background-sync';\nconst REQUEST_OBJECT_STORE_NAME = 'requests';\nconst QUEUE_NAME_INDEX = 'queueName';\n/**\n * A class to interact directly an IndexedDB created specifically to save and\n * retrieve QueueStoreEntries. This class encapsulates all the schema details\n * to store the representation of a Queue.\n *\n * @private\n */\nexport class QueueDb {\n    constructor() {\n        this._db = null;\n    }\n    /**\n     * Add QueueStoreEntry to underlying db.\n     *\n     * @param {UnidentifiedQueueStoreEntry} entry\n     */\n    async addEntry(entry) {\n        const db = await this.getDb();\n        await db.add(REQUEST_OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the first entry id in the ObjectStore.\n     *\n     * @return {number | undefined}\n     */\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value.id;\n    }\n    /**\n     * Get all the entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<QueueStoreEntry[]>}\n     */\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    /**\n     * Deletes a single entry by id.\n     *\n     * @param {number} id the id of the entry to be deleted\n     */\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'next');\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'prev');\n    }\n    /**\n     * Returns either the first or the last entries, depending on direction.\n     * Filtered by index.\n     *\n     * @param {IDBCursorDirection} direction\n     * @param {IDBKeyRange} query\n     * @return {Promise<QueueStoreEntry | undefined>}\n     * @private\n     */\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.index(QUEUE_NAME_INDEX)\n            .openCursor(query, direction);\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value;\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb,\n            });\n        }\n        return this._db;\n    }\n    /**\n     * Upgrades QueueDB\n     *\n     * @param {IDBPDatabase<QueueDBSchema>} db\n     * @param {number} oldVersion\n     * @private\n     */\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: 'id',\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, { unique: false });\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nconst serializableProperties = [\n    'method',\n    'referrer',\n    'referrerPolicy',\n    'mode',\n    'credentials',\n    'cache',\n    'redirect',\n    'integrity',\n    'keepalive',\n];\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nclass StorableRequest {\n    /**\n     * Accepts an object of request data that can be used to construct a\n     * `Request` but can also be stored in IndexedDB.\n     *\n     * @param {Object} requestData An object of request data that includes the\n     *     `url` plus any relevant properties of\n     *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n     * @private\n     */\n    constructor(requestData) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData',\n            });\n            assert.isType(requestData.url, 'string', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData.url',\n            });\n        }\n        // If the request's mode is `navigate`, convert it to `same-origin` since\n        // navigation requests can't be constructed via script.\n        if (requestData['mode'] === 'navigate') {\n            requestData['mode'] = 'same-origin';\n        }\n        this._requestData = requestData;\n    }\n    /**\n     * Converts a Request object to a plain object that can be structured\n     * cloned or JSON-stringified.\n     *\n     * @param {Request} request\n     * @return {Promise<StorableRequest>}\n     *\n     * @private\n     */\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {},\n        };\n        // Set the body if present.\n        if (request.method !== 'GET') {\n            // Use ArrayBuffer to support non-text request bodies.\n            // NOTE: we can't use Blobs becuse Safari doesn't support storing\n            // Blobs in IndexedDB in some cases:\n            // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        // Convert the headers from an iterable to an object.\n        for (const [key, value] of request.headers.entries()) {\n            requestData.headers[key] = value;\n        }\n        // Add all other serializable request properties\n        for (const prop of serializableProperties) {\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    /**\n     * Returns a deep clone of the instances `_requestData` object.\n     *\n     * @return {Object}\n     *\n     * @private\n     */\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    /**\n     * Converts this instance to a Request.\n     *\n     * @return {Request}\n     *\n     * @private\n     */\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    /**\n     * Creates and returns a deep clone of the instance.\n     *\n     * @return {StorableRequest}\n     *\n     * @private\n     */\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\nexport { StorableRequest };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const QUEUE_NAME = 'workbox-google-analytics';\nexport const MAX_RETENTION_TIME = 60 * 48; // Two days in minutes\nexport const GOOGLE_ANALYTICS_HOST = 'www.google-analytics.com';\nexport const GTM_HOST = 'www.googletagmanager.com';\nexport const ANALYTICS_JS_PATH = '/analytics.js';\nexport const GTAG_JS_PATH = '/gtag/js';\nexport const GTM_JS_PATH = '/gtm.js';\nexport const COLLECT_DEFAULT_PATH = '/collect';\n// This RegExp matches all known Measurement Protocol single-hit collect\n// endpoints. Most of the time the default path (/collect) is used, but\n// occasionally an experimental endpoint is used when testing new features,\n// (e.g. /r/collect or /j/collect)\nexport const COLLECT_PATHS_REGEX = /^\\/(\\w+\\/)?collect/;\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:google-analytics:6.2.4'] && _();\n}\ncatch (e) { }\n"],"names":["initialize","$kUiUt","registerRoute","request","mode","$18BLr","NetworkFirst","cacheName","destination","$5asPP","StaleWhileRevalidate","plugins","$fHxKn","ExpirationPlugin","maxAgeSeconds","purgeOnQuotaError","$bDW6l","CacheFirst","maxEntries","$9NL3Y","CacheableResponsePlugin","statuses","$3r2ea","Route","$fb7db80a3b5e57a6$export$c570b53d69fdae44","Error","constructor","errorCode","details","super","$aJJ9W","messageGenerator","name","$7d1123144fc2ce24$export$165423423f02eff6","code","args","msg","length","JSON","stringify","$4ac31c20cd4c87f5$export$de08ebe063ea597","paramName","validValueDescription","value","moduleName","className","funcName","expectedType","expectedClassName","isReturnValueProblem","classNameStr","expectedMethod","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","method","methodName","expectedClass","normalizedRangeHeader","size","start","end","url","error","message","status","origin","self","_","e","$f75cced07a9ff014$export$42a9043674814096","$28059f12b7dc6d64$export$90dc2b712eed10fd","match","handler1","$6W99n","defaultMethod","handler","$aWBST","normalizeHandler","setCatchHandler","catchHandler","$50cf41ea17fb8df6$export$fa9dc49879ac8789","$7f7cb52f523a7ea2$export$967ebf06e12b8094","handle","$60b7f21dc0483f89$export$c6ba57687ca295df","regExp","result","exec","href","location","index","slice","$f387b4b64cab3ecf$export$8ddf2c0ec841b476","capture","route","captureUrl","URL","matchCallback","RegExp","$8iPut","RegExpRoute","$lAGep","WorkboxError","$1DNf0","getOrCreateDefaultRouter","$131fa134e7e5a4ad$var$defaultRouter","$131fa134e7e5a4ad$export$4019bae12c47f962","$56LY5","Router","addFetchListener","addCacheListener","$3b82b8be32251126$export$1ea3463d2e476fc2","_routes","Map","_defaultHandlerMap","routes","addEventListener","event","responsePromise","this","handleRequest","respondWith","data","type","payload","requestPromises","Promise","all","urlsToCache","map","Request","waitUntil","ports","then","postMessage","protocol","startsWith","sameOrigin","params","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","matchResult","Array","isArray","Object","keys","undefined","setDefaultHandler","set","push","unregisterRoute","routeIndex","indexOf","splice","$e9ca44ef1452270f$export$a4a0b6a488814dcc","String","replace","$87a067f13f8cda8d$export$8f45090fd1b89589","$fntJm","Strategy","_handle","response","cacheMatch","fetchAndCachePut","$b32010e075a1a60b$export$9c171ec80b513d19","options1","$fnWB9","cacheNames","getRuntimeName","fetchOptions","matchOptions","options","responseDone","handleAll","FetchEvent","$lpoyu","StrategyHandler","_getResponse","_awaitComplete","runCallbacks","callback","iterateCallbacks","error1","doneWaiting","waitUntilError","destroy","$b336755dca63246c$var$_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","$b336755dca63246c$var$_createCacheName","filter","join","$b336755dca63246c$export$94050e0f741138d0","updateDetails","fn","key","$b336755dca63246c$var$eachCacheNameDetail","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getSuffix","$f95efaf5529032aa$var$toRequest","input","$f95efaf5529032aa$export$8e6ed645ef1ef1c2","strategy","_cacheKeys","assign","_strategy","_handlerDeferred","$hTgrc","Deferred","_extendLifetimePromises","_plugins","_pluginStateMap","plugin","promise","fetch","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","pluginFilteredRequest","fetchResponse","responseClone","cachePut","cachedResponse","effectiveRequest","getCacheKey","multiMatchOptions","caches","$iL0jC","timeout","$k4stw","getFriendlyURL","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","$7b9zu","cacheMatchIgnoreParams","put","$g72zS","executeQuotaErrorCallbacks","newResponse","plugin1","param","state","statefulCallback","statefulParam","shift","resolve","pluginsUsed","$53a0fc2feaa86ad0$var$stripParams","fullURL","ignoreParams","strippedURL","searchParams","delete","$53a0fc2feaa86ad0$export$a8727b2b53bea127","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheKey","$d06452e3a7175bdd$export$bd8a86f521c14193","$bbaf4ca5fe4dc4fe$export$9aa9bb28d4ed1e49","$6J19k","quotaErrorCallbacks","$4e57d6497d82df60$export$8a847c1120b12a4f","Set","$da7cdc708c3a9b47$export$1c1da4f183aa4a18","ms","setTimeout","$0d43d4f8aa6ec1f8$export$88a56dae9e59b284","some","p","unshift","$9B5S8","cacheOkAndOpaquePlugin","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchError","clearTimeout","$6fcc1fd7cce175c5$export$b63c05ce3a3947df","cacheWillUpdate","$f49a796e30b96b08$export$314140f8a151215d","timeoutPromise","$3c3440f756134d50$export$83391611f2145162","fetchAndCachePromise","$af782fef1b97cb97$export$47b2e6a0ce9e5d68","config","_isRunning","_rerunRequested","_maxEntries","_maxAgeSeconds","_matchOptions","_cacheName","_timestampModel","$jt2wg","CacheTimestampsModel","expireEntries","minTimestamp","Date","now","urlsExpired","$cqjEd","dontWaitFor","updateTimestamp","setTimestamp","isURLExpired","timestamp","getTimestamp","expireOlderThan","Infinity","$90b7275d7783d8d3$export$7c5b0f0bae3fe749","$e2c2ae116b5ff7d7$var$CACHE_OBJECT_STORE","$e2c2ae116b5ff7d7$var$normalizeURL","unNormalizedUrl","hash","$e2c2ae116b5ff7d7$export$13d76fc3ec171f54","_db","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","$9NXmr","deleteDB","_getId","getDb","maxCount","cursor","transaction","store","openCursor","entriesToDelete","entriesNotDeletedCount","continue","urlsDeleted","openDB","upgrade","bind","$7236bc83a84ea6c6$export$634bb097c2e0da47","version","blocked","blocking","terminated","indexedDB","openPromise","$3OISC","w","oldVersion","newVersion","$7236bc83a84ea6c6$export$3404353ca8420c7d","deleteDatabase","$7236bc83a84ea6c6$var$readMethods","$7236bc83a84ea6c6$var$writeMethods","$7236bc83a84ea6c6$var$cachedMethods","$7236bc83a84ea6c6$var$getMethod","target","prop","IDBDatabase","targetFuncName","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","storeName","tx","target1","done","r","oldTraps","receiver","$2c78dad8dcff93d6$var$idbProxyableTypes","$2c78dad8dcff93d6$var$cursorAdvanceMethods","$2c78dad8dcff93d6$var$cursorRequestMap","WeakMap","$2c78dad8dcff93d6$var$transactionDoneMap","$2c78dad8dcff93d6$var$transactionStoreNamesMap","$2c78dad8dcff93d6$var$transformCache","$2c78dad8dcff93d6$export$7ac649919d1c80a6","$2c78dad8dcff93d6$var$idbProxyTraps","IDBTransaction","objectStoreNames","objectStore","$2c78dad8dcff93d6$export$4baea45f964aa150","$2c78dad8dcff93d6$export$a76dc8286969aab3","$2c78dad8dcff93d6$var$wrapFunction","func","IDBCursor","advance","continuePrimaryKey","apply","$2c78dad8dcff93d6$export$997a1d1e3d56d17a","storeNames","call","sort","$2c78dad8dcff93d6$var$transformCachableValue","unlisten","removeEventListener","complete","DOMException","$2c78dad8dcff93d6$var$cacheDonePromiseForTransaction","object","c","Proxy","IDBRequest","success","$2c78dad8dcff93d6$var$promisifyRequest","newValue","$b6e50c9b8bd837c0$export$6aff68bdb770e648","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","cacheDidUpdate","_config","_cacheExpirations","$dfA66","registerQuotaErrorCallback","deleteCacheAndMetadata","$f41eC","CacheExpiration","dateHeaderTimestamp","_getDateHeaderTimestamp","headers","dateHeader","headerTime","getTime","isNaN","$9a58ad46164d31e8$export$387f9fd7fec5990a","add","$3b9f77ab1747cee5$export$5187dde29e830347","_statuses","_headers","isResponseCacheable","cacheable","headerName","$722d32671a823b43$export$e69902ff2e5d0f45","_cacheableResponse","$57n1F","CacheableResponse","$3e93c57d019992ab$var$createCollectRoutes","bgSyncPlugin","hostname","$2n4dr","GOOGLE_ANALYTICS_HOST","COLLECT_PATHS_REGEX","test","pathname","$l0187","NetworkOnly","$3e93c57d019992ab$var$createAnalyticsJsRoute","ANALYTICS_JS_PATH","$3e93c57d019992ab$var$createGtagJsRoute","GTM_HOST","GTAG_JS_PATH","$3e93c57d019992ab$var$createGtmJsRoute","GTM_JS_PATH","$3e93c57d019992ab$export$706eee40925fb962","$jjx9o","BackgroundSyncPlugin","QUEUE_NAME","maxRetentionTime","MAX_RETENTION_TIME","onSync","queue","shiftRequest","URLSearchParams","text","originalHitTime","Number","queueTime","parameterOverrides","hitFilter","body","toString","credentials","unshiftRequest","router","$e0f981a4e7fee688$export$aa9fa0c3f348cd61","fetchDidFail","_queue","pushRequest","$kPsx4","Queue","$f29eb40721980c14$var$queueNames","$f29eb40721980c14$var$convertEntry","queueStoreEntry","queueEntry","$92lnV","StorableRequest","requestData","toRequest","metadata","$f29eb40721980c14$export$6aed6688fce84c6c","_syncInProgress","_requestsAddedDuringSync","_name","_onSync","replayRequests","_maxRetentionTime","_queueStore","$7entb","QueueStore","_addSyncListener","_addRequest","popRequest","_removeRequest","getAll","allEntries","unexpiredEntries","maxRetentionTimeInMs","deleteEntry","operation","fromRequest","toObject","registerSync","sync","register","tag","syncComplete","syncError","lastChance","_queueNames","$543c0bcc3fdc72d1$export$6adf406da9ec2964","queueName","_queueName","_queueDb","$i5W0N","QueueDb","pushEntry","addEntry","unshiftEntry","firstId","getFirstEntryId","popEntry","_removeEntry","getLastEntryByQueueName","shiftEntry","getFirstEntryByQueueName","getAllEntriesByQueueName","$d2c5b194c81315cb$var$REQUEST_OBJECT_STORE_NAME","$d2c5b194c81315cb$var$QUEUE_NAME_INDEX","$d2c5b194c81315cb$export$41fee114750185fc","results","getAllFromIndex","IDBKeyRange","only","getEndEntryFromIndex","query","direction","contains","deleteObjectStore","autoIncrement","$6944e38df17e912c$var$serializableProperties","$6944e38df17e912c$export$de680338f7e7070a","_requestData","requestData1","arrayBuffer","entries","$1ba0ffee48091049$export$7b35576bc1bdf0e2","$1ba0ffee48091049$export$82a6a48a40b0bcea","$1ba0ffee48091049$export$1dc76de252a1f1d1","$1ba0ffee48091049$export$4fb2b2c2c2470fc9","$1ba0ffee48091049$export$d2bb7d757093526","$1ba0ffee48091049$export$3d12ab861134b731","$1ba0ffee48091049$export$919df9f3d3c86a82","$1ba0ffee48091049$export$9c612acb1b9f3d21"],"version":3,"file":"sw.js.map"}